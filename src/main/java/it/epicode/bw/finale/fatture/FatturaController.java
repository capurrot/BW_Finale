package it.epicode.bw.finale.fatture;import io.swagger.v3.oas.annotations.parameters.RequestBody;import it.epicode.bw.finale.auth.AppUser;import it.epicode.bw.finale.filter.FatturaFilterDto;import jakarta.validation.Valid;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.format.annotation.DateTimeFormat;import org.springframework.http.HttpStatus;import org.springframework.security.access.prepost.PreAuthorize;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.web.bind.annotation.*;import java.time.LocalDate;@RestController@RequestMapping("/fatture")@RequiredArgsConstructorpublic class FatturaController {    @Autowired    private FatturaService fatturaService;    @PostMapping    @ResponseStatus(HttpStatus.CREATED)    public FatturaResponse createFattura(@RequestBody @Valid FatturaRequest request) {        return fatturaService.createFattura(request);    }    public Page<FatturaResponse> findAll(@RequestParam(defaultValue = "0") int page,@RequestParam(defaultValue = "10") int size, @RequestParam(defaultValue = "id") String sortBy){        return fatturaService.findAll(page, size, sortBy);    }    @GetMapping("/filter")    @PreAuthorize("hasRole('ROLE_ADMIN')")    public Page<FatturaResponse> filterFatture(            @RequestParam(required = false) Long idCliente,            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate data,            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate anno,            @RequestParam(required = false) Double importoDa,            @RequestParam(required = false) Double importoA,            @RequestParam(defaultValue = "0") int page,            @RequestParam(defaultValue = "10") int size,            @RequestParam(defaultValue = "id,asc") String[] sort) {        FatturaFilterDto filtro = new FatturaFilterDto();        filtro.setIdCliente(idCliente);        filtro.setData(data);        filtro.setAnno(anno);        filtro.setImportoDa(importoDa);        filtro.setImportoA(importoA);        Sort.Order order = new Sort.Order(Sort.Direction.fromString(sort[1]), sort[0]);        Pageable pageable = PageRequest.of(page, size, Sort.by(order));        return fatturaService.filterFatture(filtro, pageable);    }    @GetMapping("/{id}")    public FatturaResponse findById(@PathVariable Long id) {        return fatturaService.findById(id);    }    @PutMapping("/{id}")    @PreAuthorize("hasRole('ROLE_ADMIN')")    public FatturaResponse updateFattura(@PathVariable Long id, @RequestBody @Valid FatturaRequest request, @AuthenticationPrincipal AppUser adminLoggato) {        return fatturaService.updateFattura(id, request, adminLoggato);    }    @DeleteMapping("/{id}")    @PreAuthorize("hasRole('ROLE_ADMIN')")    @ResponseStatus(HttpStatus.NO_CONTENT)    public void deleteFattura(@PathVariable Long id, @AuthenticationPrincipal AppUser adminLoggato) {        fatturaService.deleteFattura(id, adminLoggato);    }}